---
import Spacer from '../Spacer.astro';

interface Props {
  pricing: {
    averageDaysInMonth: number;
    storagePerGiB: number;
    coreInstancePrice: {
      name: string;
      price: number;
      rootStorageSizeGiB: number;
      memoryGiB: number;
      vCpu: number;
    }[];
  };
}

const { pricing } = Astro.props;

const { averageDaysInMonth, storagePerGiB } = pricing;

const formatter = new Intl.NumberFormat('fi-FI', {
  style: 'currency',
  currency: 'EUR',
  minimumFractionDigits: 2,
});

const formatterLong = new Intl.NumberFormat('fi-FI', {
  style: 'currency',
  currency: 'EUR',
  minimumFractionDigits: 3,
});
---

<div>
  <table>
    <colgroup>
      <col span="1" style="width: 26%" />
      <col span="1" style="width: 16%;" />
      <col span="1" style="width: 14%;" />
      <col span="1" style="width: 22%;" />
      <col span="1" style="width: 22%;" />
    </colgroup>
    <thead>
      <tr>
        <th>Cluster size</th>
        <th>Memory</th>
        <th>vCPU</th>
        <th>€/hour</th>
        <th>€/month</th>
      </tr>
    </thead>
    <tbody>
      {
        pricing.coreInstancePrice.map((core) => (
          <tr>
            <td>{core.name}</td>
            <td>{core.memoryGiB} GB</td>
            <td>{core.vCpu}</td>
            <td>
              <span>{formatterLong.format(core.price)}</span>
            </td>
            <td>
              <span data-cluster-price={core.price} />
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>

  <Spacer size="medium" />

  <table>
    <colgroup>
      <col span="1" style="width: 26%" />
      <col span="1" style="width: 30%;" />
      <col span="1" style="width: 25%;" />
      <col span="1" style="width: 22%;" />
    </colgroup>
    <thead>
      <tr>
        <th></th>
        <th>Size</th>
        <th>€/GB/hour</th>
        <th>€/month</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Storage</td>
        <td>
          <input id="storage" type="number" value="10" />
        </td>
        <td>
          <span id="storage-price-hour">
            {formatter.format(pricing.storagePerGiB)}
          </span>
        </td>
        <td>
          <span id="storage-price-month">
            {formatter.format(pricing.storagePerGiB * 10 * averageDaysInMonth * 24)}
          </span>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<script define:vars={{ averageDaysInMonth, storagePerGiB }}>
  const storageInput = document.getElementById('storage');
  const storagePriceHourElement = document.getElementById('storage-price-hour');
  const storagePriceMonthElement = document.getElementById('storage-price-month');

  const formatter = new Intl.NumberFormat('fi-FI', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: 2,
  });

  const formatterLong = new Intl.NumberFormat('fi-FI', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: 3,
  });

  const getHours = () => parseFloat(document.querySelector('[data-hours]')?.getAttribute('data-hours'));

  const getStoragePrice = () => {
    let price = parseFloat(storageInput.value) * storagePerGiB;
    if (isNaN(price) || price < 0) price = 0;
    return price;
  };

  const updateStoragePrice = () => {
    const price = getStoragePrice();

    storagePriceHourElement.innerHTML = formatterLong.format(price);
    storagePriceMonthElement.innerHTML = formatter.format(price * averageDaysInMonth * 24);
  };

  const updateClusterPrice = () => {
    const hours = getHours();

    document.querySelectorAll('[data-cluster-price]').forEach((element) => {
      const clusterPrice = parseFloat(element.getAttribute('data-cluster-price'));
      element.innerHTML = formatter.format(clusterPrice * hours);
    });
  };

  updateStoragePrice();
  updateClusterPrice();

  document.addEventListener('pricing-update', () => {
    updateStoragePrice();
    updateClusterPrice();
  });

  const dispatchUpdateEvent = () => document.dispatchEvent(new Event('pricing-update'));

  storageInput.addEventListener('input', dispatchUpdateEvent);
  storageInput.addEventListener('change', dispatchUpdateEvent);
  storageInput.value = '10';
</script>

<style>
  table {
    width: 100%;
    table-layout: fixed;
    color: var(--color-text-primary);
    border-collapse: collapse;
    margin-left: calc(-1 * var(--padding-page-x));
    width: calc(100% + 2 * var(--padding-page-x));

    @media (min-width: 992px) {
      width: 100%;
      margin-left: 0;
    }
  }

  table th {
    text-align: left;
    font-weight: 400;
    color: var(--color-text-secondary);
  }

  th {
    padding: var(--space-s) var(--space-l);
    font-size: 1rem;
  }
  td {
    padding: var(--space-l);
    font-size: 1rem;
  }

  table tbody tr:nth-of-type(odd) {
    > td {
      background-color: var(--color-bg-secondary);
    }

    @media (min-width: 992px) {
      td:first-of-type {
        border-top-left-radius: var(--border-radius-medium);
        border-bottom-left-radius: var(--border-radius-medium);
      }
      td:last-of-type {
        border-top-right-radius: var(--border-radius-medium);
        border-bottom-right-radius: var(--border-radius-medium);
      }
    }
  }

  table tr > th:first-of-type {
    width: 180px;
  }

  table td :global(.toggle label) {
    width: 60px;
  }

  @media (max-width: 900px) {
    table tr > th:first-of-type {
      width: 130px;
    }
  }

  input {
    width: 100%;
    padding: 0;
    border-radius: var(--border-radius-medium);
  }
</style>
