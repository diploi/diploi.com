---
import { Image } from 'astro:assets';
import Checkbox from '../Checkbox.astro';
import type { TStackBuilderBlock } from './types';
import { DownloadSimple, Flask, Sparkle } from '@phosphor-icons/react';

type Props = TStackBuilderBlock & {
  class: string;
};

const { componentID, type, name, url, class: className, badge, count } = Astro.props;

export const extractRepositoryOwnerAndRepo = (repositoryUrl: string) => {
  let url = repositoryUrl;
  if (!url.endsWith('.git')) url = `${url}.git`;

  const regex = /https:\/\/github\.com\/(.*)\.git/g.exec(url);
  if (!regex || !regex[1]) throw new Error('Failed to parse Git repo');
  const [owner, repo] = regex[1]?.split('/') || [];
  return { owner, repo };
};

const { owner, repo } = extractRepositoryOwnerAndRepo(url);

const imageSrc = `https://diploi.b-cdn.net/component/${owner}/${repo}/icon.svg?ref=main`;

const numberFormatter = new Intl.NumberFormat('fi-FI', {
  style: 'decimal',
});
---

<button class:list={['stack-builder-button', className]} data-id={componentID}>
  {
    badge === 'new' && (
      <label class="new">
        <Sparkle weight="fill" size={12} /> New
      </label>
    )
  }
  {
    badge === 'beta' && (
      <label class="beta">
        <Flask weight="fill" size={12} /> Beta
      </label>
    )
  }
  <div class="label">
    <Image alt={`${type} icon`} src={imageSrc} class="icon" width={28} height={28} />
    <span>
      <span>{name}</span>
      {
        !!count && (
          <span class="downloads">
            <DownloadSimple /> <span data-component-count={componentID}>{numberFormatter.format(count)}</span>
          </span>
        )
      }
    </span>
  </div>
  <Checkbox id={`${componentID}-checkbox`} tabIndex={-1} checked={className.includes('is-selected')} />
</button>

<style lang="scss">
  @use '../../styles/mixins';

  .stack-builder-button {
    @include mixins.gradient-border;
    padding: var(--space-xl);
    gap: var(--space-l);
    justify-content: space-between;
    @include mixins.gradient-bg;
    font-size: 1rem;
    background: var(--color-bg-secondary);
    cursor: pointer;
    min-width: 0;

    @include mixins.respond-to('tablet') {
      padding: var(--space-l);
    }

    &:hover:not(.is-selected) {
      background: var(--color-bg-secondary);
      background-color: var(--color-bg-secondary-hover);
    }

    &.is-selected {
      @include mixins.gradient-border(var(--color-accent-primary), var(--color-accent-primary));
      background: linear-gradient(to bottom, var(--color-accent-primary-20), transparent);

      background-color: var(--color-bg-secondary);

      &:hover {
        @include mixins.gradient-border(var(--color-accent-primary), var(--color-accent-primary-hover));
        background: linear-gradient(to bottom, var(--color-accent-primary-20), var(--color-bg-secondary-20));
      }
    }

    > label {
      --light: color-mix(in lch, var(--color-accent-primary), var(--color-bg) 20%);
      --dark: color-mix(in lch, var(--color-accent-primary), var(--color-bg) 50%);

      position: absolute;
      display: flex;
      align-items: center;
      gap: 4px;
      top: -8px;
      left: -8px;
      padding: 0 7px 0 4px;
      font-size: 0.875rem;
      background-color: var(--color-accent-primary);
      background: linear-gradient(to bottom, var(--light), var(--dark));
      border-radius: 32px;
      z-index: 1;

      pointer-events: none;
      user-select: none;

      &.beta {
        --light: color-mix(in lch, var(--color-accent-secondary), var(--color-bg) 30%);
        --dark: color-mix(in lch, var(--color-accent-secondary), var(--color-bg) 55%);
        background-color: var(--color-accent-secondary);
      }
    }
  }

  .label {
    display: flex;
    align-items: center;
    gap: var(--space-l);
    min-width: 0;

    > span {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: flex-start;
      min-width: 0;
      min-height: 43px;

      > span {
        max-width: 100%;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }

      .downloads {
        display: flex;
        align-items: center;
        gap: 4px;
        font-size: 0.875rem;
        opacity: 0.5;

        > svg {
          translate: 0 -1px;
        }
      }
    }
  }

  .icon {
    width: 1.75rem;
    height: 1.75rem;
  }
</style>
