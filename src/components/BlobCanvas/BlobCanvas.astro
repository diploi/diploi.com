---
type Props = {
  size?: number;
};

const { size } = Astro.props;
---

<canvas class="blob-canvas" data-size={size}></canvas>

<script>
  import { animateBlobs, INITIAL_LEFT_BLOB_DEFAULT, INITIAL_RIGHT_BLOB_DEFAULT } from './lib';

  window.addEventListener('load', () => {
    const canvases = document.querySelectorAll('.blob-canvas') as NodeListOf<HTMLCanvasElement>;

    for (const canvas of canvases) {
      const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

      const size = parseInt(canvas.getAttribute('data-size') || '200');
      let baseRadius = size;

      const resize = () => {
        const bounds = canvas.parentElement!.getBoundingClientRect();
        canvas.width = bounds.width;
        canvas.height = bounds.height;

        if (canvas.width < 500) {
          baseRadius = size / 3;
        }
      };

      addEventListener('resize', () => resize());
      resize();

      animateBlobs({
        ctx,
        leftOnly: false,
        initialLeftBlob: { ...INITIAL_LEFT_BLOB_DEFAULT, baseRadius },
        initialRightBlob: { ...INITIAL_RIGHT_BLOB_DEFAULT, baseRadius },
      });

      canvas.classList.add('ready');
    }
  });
</script>

<style>
  @keyframes blobCanvasFadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 0.5;
    }
  }

  .blob-canvas {
    position: absolute;
    inset: 0;
    filter: blur(80px);
    opacity: 0;
    z-index: -1;
    pointer-events: none;
    user-select: none;
  }

  .blob-canvas.ready {
    animation: blobCanvasFadeIn 5000ms ease;
    opacity: 0.5;
  }
</style>
