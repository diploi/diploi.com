---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { InfoIcon } from '@phosphor-icons/react';
import LovableHeroFeatures from './LovableHeroFeatures.astro';
import { createStackBackgroundUri } from '../../ai/_components/aiUtils';
import lovableIcon from '../../../images/lovable-icon.svg';

const background = createStackBackgroundUri({
  size: 32,
  primary: 'rgba(255, 255, 255, 0.05)',
  secondary: 'rgba(255, 255, 255, 0.05)',
  chance: 0.4,
});
const backgroundColor = createStackBackgroundUri({ size: 32, primary: 'white', secondary: 'white', chance: 0.6 });

const componentBlocklist = ['n8n', 'laravel', 'flask'];

const components = await getCollection('component');
const icons = components
  .filter((component) => !component.data.hidden && !componentBlocklist.includes(component.data.identifier))
  .slice(0, 18)
  .map((component) => component.data.icon);
---

<header>
  <div class="background" inert aria-hidden style={{ '--background': background, '--backgroundColor': backgroundColor }}></div>
  <section>
    <div class="title">
      <h1>Level Up Your<br />Lovable Apps</h1>
      <div>
        <Image id="lovable" width={200} height={200} src={lovableIcon} alt="vs code logo" />
        <ul class="icons">
          {
            icons.map((icon) => (
              <li>
                <img alt="component icon" src={`data:image/svg+xml;base64,${icon}`} width={16} height={16} />
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <LovableHeroFeatures />
    <a class="button" href={`${import.meta.env.VITE_API_URL}/import/lovable`}>Import Lovable Project</a>
    <p class="help"><InfoIcon /> Your Lovable project won't be altered. You can still use Lovable after importing.</p>
  </section>
</header>

<style lang="scss">
  @use 'sass:math';
  @use '../../../styles/mixins';

  header {
    display: flex;
    flex-direction: column;
    gap: 64px;
    margin: 0 auto;
    width: 100%;
    max-width: var(--max-width-page-section);
  }

  header .text-gradient {
    --accent-gradient: linear-gradient(45deg, var(--color-primary), var(--color-secondary), var(--color-primary), var(--color-secondary));

    background-size: 400%;
    animation: gradient-animation 8s infinite alternate cubic-bezier(0.65, 0, 0.35, 1);

    @keyframes gradient-animation {
      0% {
        background-position: 0%;
      }
      100% {
        background-position: 100%;
      }
    }
  }

  p.help {
    max-width: 50ch;
    font-size: 0.875rem;
    color: var(--color-text-secondary);

    > svg {
      translate: -1px 3px;
    }
  }

  @property --x {
    syntax: '<length>';
    inherits: false;
    initial-value: 0px;
  }

  @property --y {
    syntax: '<length>';
    inherits: false;
    initial-value: 0px;
  }

  @property --z {
    syntax: '<length>';
    inherits: false;
    initial-value: 0px;
  }

  section {
    margin-top: 64px;

    @media (max-width: 860px) {
      margin-top: 0px;
    }

    .title {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 56px;

      @media (max-width: 860px) {
        display: flex;
        flex-direction: column-reverse;
        align-items: center;

        > div {
          scale: 0.6;
        }

        h1 {
          text-align: center;
          font-size: 2.4em;
        }
      }

      > div {
        position: relative;
      }

      .icons {
        position: absolute;
        display: flex;
        top: 50%;
        left: -16px;
        width: calc(100% + 32px);
        rotate: 45deg;
        scale: 1.3;
        perspective: 800px;
        transform-style: preserve-3d;

        > li {
          position: absolute;
          transform-style: preserve-3d;
          translate: var(--x) var(--y) var(--z);
          filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.7));

          @keyframes item-animation {
            0% {
              --x: calc(200px + 16px);
              --y: 0px;
              --z: -10px;
              scale: 0.9;
              opacity: 0;
            }
            40% {
              opacity: 1;
            }
            50% {
              --y: 20px;
              --z: 100px;
              // scale: 1.2;
            }
            60% {
              opacity: 1;
            }
            100% {
              --x: -8px;
              --y: 0px;
              --z: -10px;
              scale: 0.9;
              opacity: 0;
            }
          }

          animation: item-animation 20s cubic-bezier(0.45, 0, 0.55, 1) infinite;

          @for $i from 1 through 18 {
            &:nth-child(#{$i}) {
              $interval: math.div(20s, 18);
              animation-delay: calc($i * $interval * -1);
            }
          }
        }
      }
    }

    > .button {
      margin: 32px 0 16px 0;
    }

    @media (max-width: 860px) {
      display: flex;
      flex-direction: column;
      align-items: center;

      > p {
        text-align: center;
      }
    }
  }

  .background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 60vh;
    background-image: var(--background);
    background-size: 896px;
    overflow: hidden;
    z-index: -1;

    mask-image: linear-gradient(to bottom, white 50%, transparent);

    &::before {
      position: absolute;
      content: '';
      display: block;
      inset: 0;
      background-image: var(--backgroundColor);
      background-size: 896px;
      opacity: 0.15;

      mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="%23000000" viewBox="0 0 256 256"><path d="M216.49,191.51a12,12,0,0,1-17,17L128,137,56.49,208.49a12,12,0,0,1-17-17l80-80a12,12,0,0,1,17,0Zm-160-63L128,57l71.51,71.52a12,12,0,0,0,17-17l-80-80a12,12,0,0,0-17,0l-80,80a12,12,0,0,0,17,17Z"></path></svg>');
      mask-size: 600px;
      mask-repeat: no-repeat;
      mask-position: 100px 0px;
    }
  }
</style>
