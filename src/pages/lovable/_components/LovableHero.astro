---
import { Icon } from '../../../components';
import { BlobCanvas } from '../../../components/BlobCanvas';
import { getCollection } from 'astro:content';
import LovableDiploi from './lovable-diploi.svg';

const components = await getCollection('component');
const icons = components.map((component) => component.data.icon);
---

<div class="hero">
  <div class="blobs">
    <BlobCanvas />
  </div>
  <div class="content">
    <LovableDiploi class="lovable-diploi-logo" width="auto" />
    <h1 class="main-heading">
      <span>
        <span>Add</span>
        <span class="scroller">
          <span>Backend</span>
          <span>Databases</span>
          <span>Services</span>
          <span>Staging</span>
          <span>Hosting</span>
        </span>
      </span>
      <span>
        to your <span class="text-gradient">Lovable</span> Apps
      </span>
    </h1>
    <p class="subtitle">
      Improve your developer experience and host multiple environments for your Lovable apps, without configuring servers.
    </p>
    <div class="icons">
      <ul>
        {
          icons.map((icon) => (
            <li>
              <img alt="component icon" src={`data:image/svg+xml;base64,${icon}`} width={40} height={40} />
            </li>
          ))
        }
      </ul>
      <div>
        <ul>
          {
            icons.map((icon) => (
              <li>
                <img alt="component icon" src={`data:image/svg+xml;base64,${icon}`} width={40} height={40} />
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <a data-event="hero_cta_click" href="#StackBuilder">
      <button>Import from Lovable</button>
    </a>
    <ul class="links">
      <a data-event="github_click" target="_blank" href="https://github.com/diploi">
        <li>
          <Icon name="GithubLogo" sizeRem={1.275} /> GitHub
          <Icon name="ArrowSquareOut" sizeRem={1} />
        </li>
      </a>
      <a data-event="discord_click" target="_blank" href="https://discord.gg/vvgQxVjC8G">
        <li>
          <Icon name="DiscordLogo" sizeRem={1.275} /> Discord
          <Icon name="ArrowSquareOut" sizeRem={1} />
        </li>
      </a>
    </ul>
  </div>
</div>

<script>
  const scroller = document.querySelector('.scroller');
  if (scroller) {
    const items = scroller.querySelectorAll('span');
    let index = 0;
    let offsetVal = 0
    scroller.setAttribute('data-animate', `true`);
    setInterval(() => {
      index = (index + 1) % items.length;
      offsetVal += items[index].clientHeight
      scroller.setAttribute('style', `--offset:${-offsetVal}px`);
      if (index === items.length - 1) {
        setTimeout(() => {
          index = 0;
          offsetVal = 0
          scroller.setAttribute('style', `--offset:0px`);
        }, 2000);
      }
    }, 2000);
  }
</script>

<style lang="scss">
  @use 'sass:math';
  @use '../../../styles/mixins';

  .hero {
    position: relative;
    display: flex;
    align-items: center;
    padding-top: 40px;
    max-width: 100vw;
    min-height: 500px;
    max-height: 1000px;
    text-align: center;
  }

  .lovable-diploi-logo {
    margin-bottom: 40px;
    height: 100px;
    @media (max-width: 600px) {
      height: 50px;
    }
  }

  .blobs {
    position: absolute;
    inset: 0 -16px;
    top: calc(var(--header-height-px) * -2);
    pointer-events: none;
    user-select: none;
  }

  .content {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 992px;
    margin: 0 auto;
    text-align: center;

    p {
      margin-bottom: var(--space-xxl);
      font-size: 1.5rem;
    }

    > * {
      opacity: 0;
      animation: fadeIn 1000ms ease 1 forwards;
      animation-delay: 200ms;

      @media (prefers-reduced-motion: reduce) {
        animation: none;
      }
    }

    button {
      width: fit-content;
      cursor: pointer;
    }
  }

  .news {
    position: relative;
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 16px;
    padding: 6px 12px;
    border-radius: 1000px;
    color: var(--color-text-primary);
    text-decoration: none;
    z-index: 2;
    scale: 0.8;

    @include mixins.respond-to('mobile') {
      scale: 1;
    }

    &::before {
      content: '';
      position: absolute;
      display: block;
      inset: 0;
      background:
        linear-gradient(black, black) padding-box,
        linear-gradient(45deg, var(--color-accent-primary), var(--color-accent-secondary)) border-box;
      border: 1px solid transparent;
      border-radius: 1000px;
      filter: saturate(2);
      z-index: -1;
    }

    &::after {
      content: '';
      position: absolute;
      display: block;
      inset: 1px;
      background:
        radial-gradient(circle at 0, var(--color-accent-primary), transparent 100px),
        radial-gradient(circle at 100%, var(--color-accent-secondary), transparent 100px);
      border-radius: 1000px;
      opacity: 0.4;
      z-index: -1;
    }
  }

  @keyframes shake {
    0% {
      rotate: 10deg;
    }
    50% {
      rotate: 20deg;
    }
    100% {
      rotate: 10deg;
    }
  }

  .main-heading {
    line-height: 1.1;
    font-weight: 700;
    position: relative;
    display: flex;
    flex-direction: column;
    span {
      font-size: 3rem;
    }
    .text-gradient {
      display: inline-block;
    }

    .scroller {
      display: inline-flex;
      flex-direction: column;
      align-items: flex-start;
      height: 3rem;

      mask-image: linear-gradient(to bottom, transparent, white 20%, white 80%, transparent);

      @media (max-width: 400px) {
        align-items: center;
      }
      > span {
        display: inline-block;
        font-weight: 600;
        color: var(--color-secondary);
        translate: 0 var(--offset);

        @for $i from 1 through 5 {
          &:nth-child(#{$i}) {
            color: color-mix(in lab, var(--color-secondary), var(--color-primary) ($i - 1) * math.div(100%, 5));
          }
        }
      }

      &[data-animate='true'] {
        > span {
          transition: translate 400ms ease-in-out;

          @media (prefers-reduced-motion: reduce) {
            transition: none;
          }
        }
      }
    }

    .bang {
      display: inline-block;
      translate: 6px 3px;
      rotate: 10deg;
      transform-origin: 50% 80%;
      color: var(--color-secondary);

      animation: shake 450ms cubic-bezier(0.34, 1.56, 0.64, 1) 2;
      animation-delay: 1500ms;

      @media (prefers-reduced-motion: reduce) {
        animation: none;
      }
    }

    @include mixins.respond-to('mobile') {
      font-size: 6rem;
    }
  }

  @keyframes scroll {
    0% {
      translate: 0 0 10px;
    }
    100% {
      translate: calc((100% + 16px) * -1) 0 10px;
    }
  }

  .icons {
    position: relative;
    display: flex;
    margin-bottom: var(--space-xxl);
    width: min(600px, 90vw);
    user-select: none;
    pointer-events: none;

    mask-image: linear-gradient(to right, transparent, white 20%, white 80%, transparent);

    > ul,
    > div > ul {
      display: flex;
      gap: 16px;
      margin-right: 16px;

      animation: scroll 30s linear infinite;

      > li {
        opacity: 0;
        animation: fadeIn 1000ms ease 1 forwards;
        animation-delay: 200ms;

        @media (prefers-reduced-motion: reduce) {
          animation: none;
        }

        @for $i from 1 through 20 {
          &:nth-child(#{$i}) {
            animation-delay: (200ms + ($i * 50ms));
          }
        }
      }
    }

    > div {
      position: absolute;
      translate: 100% 0;
    }
  }

  .links {
    display: flex;
    flex-direction: column;
    gap: 6px;
    margin-top: 24px;

    a {
      font-size: 1rem;
      text-decoration: none;
    }

    li {
      display: flex;
      align-items: center;
      gap: 5px;

      > :global(svg:last-of-type) {
        opacity: 0.8;
      }
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes moveUpDown {
    0% {
      transform: translate(-50%, -50%) translateY(0px);
    }
    50% {
      transform: translate(-50%, -50%) translateY(16px);
    }
    100% {
      transform: translate(-50%, -50%) translateY(0px);
    }
  }

  @media screen and (max-width: 500px) {
  }
</style>
