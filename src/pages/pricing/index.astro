---
import Layout from '../../layouts/Layout.astro';
import {
  SectionHeader,
  Section,
  Footer,
  ContactUsCard,
  GetStarted,
  PricingType,
  PricingTable,
  Navigation,
  PageTitle,
  Plans,
} from '../../components';
import PricingTrialBanner from './_components/PricingTrialBanner.astro';
import PricingDeployments from './_components/PricingDeployments.astro';
import PricingEnterpriceBanner from './_components/PricingEnterpriceBanner.astro';

const { pricing } = await fetch('https://console.diploi.com/api/business/pricing').then((response) => response.json());
if (!pricing) {
  throw new Error(`Failed to load pricing (${pricing.status})`);
}
---

<Layout title="Pricing - Diploi Cloud Costs" description='Usage-based pricing for cloud app hosting. Pay only for what you use, starting at â‚¬0.026/hour for a full environment.'>
  <Navigation selected="pricing" />
  <main>
    <Section>
      <div class="pricing-cards">
        <PageTitle tagText="Pricing" title="Simple, Predictable Pricing" />
        <section>
          <PricingTrialBanner />
          <PricingDeployments />
        </section>
        <hr />
        <PricingEnterpriceBanner />
      </div>

      <hr />

      <Section>
        <SectionHeader
          title="Cluster Costs"
          highlightedText="Cluster"
          description="A running Diploi deployment spins up a cluster that runs everything to do with your stack."
          descriptionSuffix="You will only be charged for the hours your cluster is running."
        />

        <PricingType pricing={pricing} />
        <PricingTable pricing={pricing} />
      </Section>
      <hr />
      <Section>
        <div class="callout">
          <GetStarted />
          <ContactUsCard />
        </div>
      </Section>
    </Section>
  </main>
  <Footer />
</Layout>

<style lang="scss">
  @use '../../styles/mixins';

  .pricing-cards {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-huge);

    > section {
      display: flex;
      flex-direction: column;
      width: 100%;
      gap: 32px;
    }
  }

  .callout {
    display: flex;
    flex-direction: column;
    gap: var(--space-xxl);
    @include mixins.respond-to('tablet') {
      flex-direction: row;
      gap: var(--space-l);
    }
  }
</style>
